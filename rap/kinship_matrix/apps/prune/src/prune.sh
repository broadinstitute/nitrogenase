#!/bin/bash
# prune 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    set -e -x -v -u

    echo "Value of bed: '$bed'"
    echo "Value of bim: '$bim'"
    echo "Value of fam: '$fam'"
    echo "Value of out_prefix: '$out_prefix'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$bed" -o input.bed
    dx download "$bim" -o input.bim
    dx download "$fam" -o input.fam

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # Install plink2

    apt -y update
    apt -y upgrade

    mkdir plink
    cd plink
    wget https://s3.amazonaws.com/plink2-assets/alpha3/plink2_linux_x86_64_20220814.zip
    unzip plink2_linux_x86_64_20220814.zip
    ls -ralt
    mv plink2 /usr/local/bin/
    cd ..
    rm -r plink

    # Prune with plink2

    plink2 --bfile input --allow-no-sex --indep-pairwise 1000kb 1 0.2 --rm-dup force-first --out out --seed 1
    plink2 --bfile input --allow-no-sex --extract out.prune.in --keep-allele-order --make-bed --out "$out_prefix" \
            --seed 1

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    out_file_bed="$out_prefix.bed"
    out_file_bim="$out_prefix.bim"
    out_file_fam="$out_prefix.fam"

    out_bed=$(dx upload "$out_file_bed" --brief)
    out_bim=$(dx upload "$out_file_bim" --brief)
    out_fam=$(dx upload "$out_file_fam" --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output out_bed "$out_bed" --class=file
    dx-jobutil-add-output out_bim "$out_bim" --class=file
    dx-jobutil-add-output out_fam "$out_fam" --class=file
}
