#!/bin/bash
# vcfs2gds 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Let's go!"

    echo "Value of vcfs: '${vcfs[@]}'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    vcf_files=()

    echo "All the files:"

    ls -ralt

    for i in ${!vcfs[@]}
    do
        vcf_file="input_${i}.vcf"
        dx download "${vcfs[$i]}" -o "$vcf_file"
        vcf_files+=("$vcf_file")
    done

    echo "All the files after downloads:"

    ls -ralt

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

cat <<- EOF > vcfs_to_gds.R
library(SeqArray)

options(error = function() { traceback(2); quit(status = 19) })

vcf_names <- NULL
gds_name <- NULL
args <- commandArgs()

i_in_arg <- match("-i", args, nomatch = match("--vcf", args, nomatch = match("--vcfs", args, nomatch = -1)))
i_out_arg <- match("-o", args, nomatch = match("--gds", args, nomatch = -1))
if (i_in_arg == -1 | i_in_arg == i_out_arg - 1 | i_in_arg == length(args)) {
  stop("Did not provide command line option '-i' with input file(s).")
}
print(i_in_arg)
if (i_out_arg == -1 | i_out_arg == i_in_arg - 1 | i_out_arg == length(args)) {
  stop("Did not provide command line option '-o' with output file.")
}
print(i_out_arg)
if (i_in_arg < i_out_arg) {
  vcf_names <- args[(i_in_arg + 1):(i_out_arg - 1)]
} else {
  vcf_names <- args[(i_in_arg + 1):length(args)]
}
gds_name <- args[i_out_arg + 1]
print("VCF files:")
print(vcf_names)
print(paste0("Now converting to GDS (", gds_name, "):"))
seqVCF2GDS(vcf_names, gds_name)
print("Done!")
EOF

    Rscript vcfs_to_gds.R -i "${vcf_files[@]}" -o gds

    echo "All the files after conversion:"

    ls -ralt

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    gds=$(dx upload gds --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output gds "$gds" --class=file
}
